file_paths_notice: &file_paths_notice
  - "-> **Note**: The specified path cannot contain Operating Specific file system abstractions, such as the homedir symbol `~` for *NIX systems. This will be seen as a malformed path."

options:
  - config_key: active
    env_key: APPSIGNAL_ACTIVE
    required: true
    ruby:
      since: 0.3.0
      since_notes:
        - "`0.11.6`: Support added for the system environment option."
      type: bool
      default_value:
        markdown: "`false` / detected by system"
    elixir:
      since: 0.1.0
      type: bool
      default_value:
        markdown: "`false` / detected by system"
    nodejs:
      type: bool
      default_value:
        markdown: "`false` / detected by system"
    description: |
      Configure AppSignal to be active or not for a given environment. Most commonly used in the [file configuration](index.html) per environment.

      -> **Note**: When the [`APPSIGNAL_PUSH_API_KEY`](#option-push_api_key) environment variable is set, this defaults to `true`. This can be overridden by setting the `APPSIGNAL_ACTIVE` system environment variable to `false`: `APPSIGNAL_ACTIVE=false`.
  - named_key: env
    env_key: APPSIGNAL_APP_ENV
    required: true
    ruby:
      since: 0.11.8
      since_notes:
        - "`1.3.0`: Support added for Padrino."
        - "`1.3.6`: Support added for Sinatra."
        - "`2.0.4`: Standardizes the behavior for all configuration."
      type: string
      default_value:
        markdown: "`\"\"` / detected by system"
      description: |
        The environment of the app to be reported to AppSignal. This config option will be automatically detected in Rails apps. For Rails apps the `RAILS_ENV` variable is used to detect the environment. For apps using other frameworks or none at all, the `RACK_ENV` environment variable is used.

        To override the automatic detecting, use the `APPSIGNAL_APP_ENV` environment variable.

        ```sh
        export APPSIGNAL_APP_ENV=staging
        rackup
        ```

        This option will be used to load the configuration from the [config files](index.html) in which the AppSignal configuration is stored.

        The environment variable option is commonly used on platforms where apps run in the `production` environment by default, such as Heroku. This setting allows an override to set the environment to `staging`, for example.

        ```sh
        heroku config:set APPSIGNAL_APP_ENV=staging
        ```

        -> **Note**: Changing the [name](#option-name) or environment of an existing app will create a new app on AppSignal.com.

        -> **Note**: This config option has no config file key equivalent. To set the environment on AppSignal initialization, you'll need to [initialize the configuration manually](/ruby/instrumentation/integrating-appsignal.html#configuration-file).

        ####^option-appsignal_app_env Custom environments in config file

        There is no `env` key available in the `config/appsignal.yml` file. If you wish to dynamically set the environment name for an app in the config file it's possible to customize your config file to use the environment to create an environment.

        ```yml
        # config/appsignal.yml
        <%= ENV["APPSIGNAL_APP_ENV"] %>:
          active: true
        ```

        If you use another environment variable than `APPSIGNAL_APP_ENV` make sure that matches the value is any of the auto detected environment variable names (`RAILS_ENV` and `RACK_ENV`) or the value given to [`Appsignal::Config.new`](/ruby/instrumentation/integrating-appsignal.html#configuration-file).
    elixir:
      config_key: env
      since: 0.1.0
      since_notes:
        - "`0.9.2`: The environment variable name for this configuration option was renamed from `APPSIGNAL_ENVIRONMENT` to `APPSIGNAL_APP_ENV`."
      type: atom
      default_value: :dev
      description: |
        The environment of the app to be reported to AppSignal. This option is set by default by our installer, to `Mix.env`. To override it, change the value in `config/appsignal.exs` (or your config file of choice).

        ```elixir
        # config/appsignal.exs
        # or config/config.exs
        config :appsignal, :config,
          env: Mix.env # Installer default

        # Set your own value
        config :appsignal, :config,
          env: :staging
        ```


        To override the config option in the system environment, use the `APPSIGNAL_APP_ENV` environment variable.

        ```sh
        # The method of setting environment variables may differ on your system
        export APPSIGNAL_APP_ENV=staging
        mix run
        ```

        The environment variable option is commonly used on platforms, such as Heroku, where apps run in the `production` environment by default. This setting allows an override to set the environment to `staging`, for example.

        ```sh
        heroku config:set APPSIGNAL_APP_ENV=staging
        ```

        -> **Note**: Changing the [name](#option-name) or environment of an existing app will create a new app on AppSignal.com.
    nodejs:
      config_key: environment
      type: string
      default_value: |
        Read from environment variable `NODE_ENV`, defaults to "development".
      description: |
        The environment of the app to be reported to AppSignal.
  - config_key: otp_app
    env_key: APPSIGNAL_OTP_APP
    required: true
    elixir:
      since: 2.0.0
      type: string
      default_value: null
      description: |
        The OTP app name of your application, to be used for automatic configuration of instrumentation for libraries like Ecto.
  - config_key: name
    env_key: APPSIGNAL_APP_NAME
    required: true
    ruby:
      since: 1.0.0
      type: string
      default_value: null
      description: |
        Name of your application as it should be displayed on AppSignal.com. If you use Ruby on Rails the gem will auto-detect the name and you can leave this empty. For other frameworks setting this is mandatory.
    elixir:
      type: atom
      default_value: null
      description: |
        Name of your application as it should be displayed on AppSignal.com.
    nodejs:
      type: string
      default_value: nil
      description: |
        Name of your application as it should be displayed on AppSignal.com.
    description: |
      -> **Note**: Changing the name or [environment](#option-env) of an existing app will create a new app on AppSignal.com.
  - config_key: push_api_key
    env_key: APPSIGNAL_PUSH_API_KEY
    required: true
    ruby:
      since: 0.1.0
      type: string
      default_value: null
    elixir:
      since: 0.1.0
      type: string
      default_value: null
    nodejs:
      since: 2.2.5
      since_notes:
        - This config option was renamed from `apiKey` in version 2.2.5.
      config_key: pushApiKey
      type: string
      default_value: null
    description: |
      The organization-level authentication key to authenticate with our Push API.

      Read more about the [AppSignal Push API key](/appsignal/terminology.html#push-api-key).

      -> **Note**: When the [`APPSIGNAL_PUSH_API_KEY`](#option-push_api_key) system environment variable is set, the [`active`](#option-active) option will default to `true` instead of `false`. This means AppSignal will be consider active for the loaded environment even if `active` is set to `false` in the config file. For more information see the [`active`](#option-active) option.
  - config_key: api_key
    env_key: APPSIGNAL_PUSH_API_KEY
    required: true
    nodejs:
      since: 1.0.0
      since_notes:
        - Deprecated since version 2.2.5 in favor of the [`pushApiKey` config option](#option-pushapikey).
      config_key: apiKey
      type: string
      default_value: null
    description: |
      Deprecated config option. Use the [`pushApiKey` config option](#option-pushapikey) instead.
  - config_key: ca_file_path
    env_key: APPSIGNAL_CA_FILE_PATH
    ruby:
      since: 1.3.5
      type: string
      default_value:
        markdown: Packaged `cacert.pem` file path.
      description:
        - Configure the path of the SSL certificate file. By default this points to the AppSignal [vendored `cacert.pem` file](https://github.com/appsignal/appsignal-ruby/blob/4eed259e122d10df66655098ad0aa8a362f3297d/resources/cacert.pem) in the gem itself.
    elixir:
      since: 0.12.0
      type: string
      default_value:
        markdown: Packaged `cacert.pem` file path.
      description:
        - Configure the path of the SSL certificate file. By default this points AppSignal [vendored `cacert.pem` file](https://github.com/appsignal/appsignal-elixir/blob/f90759c04a4ff0274e2566704a462d652c988a70/priv/cacert.pem) in the package itself.
    nodejs:
      config_key: caFilePath
      type: string
      default_value:
        markdown: Packaged `cacert.pem` file path.
    description:
      - Use this option to point to another certificate file if there's a problem connecting to our API.
      - *file_paths_notice
  - config_key: debug
    env_key: APPSIGNAL_DEBUG
    ruby:
      since: 1.0.0
      since_notes:
        - Deprecated since version 3.0.16 in favor of the [`log_level` config option](#option-log_level).
      type: bool
      default_value: false
      description:
        - "!> **Warning**: This config option is deprecated in Ruby gem 3.0.16. Please use the [`log_level`](#option-log_level) option instead for Ruby gem 3.0.16 and newer."
        - Enable debug logging, this is usually only needed on request from support. With this option enabled AppSignal will log a lot more information about decisions that are made during metrics collection and when data is sent to AppSignal.com servers.
        - Enabling debug logging could have a slight impact on the disk usage and IO, especially on high-traffic sites. CPU overhead is minimal with the debug option enabled.
    elixir:
      since: 1.0.0
      since_notes:
        - Deprecated since version 2.2.8 in favor of the [`log_level` config option](#option-log_level).
      type: bool
      default_value: false
      description:
        - "!> **Warning**: This config option is deprecated in Elixir package 2.2.8. Please use the [`log_level`](#option-log_level) option instead for Elixir package 2.2.8 and newer."
        - Enable debug logging, this is usually only needed on request from support. With this option enabled AppSignal will log a lot more information about decisions that are made during metrics collection and when data is sent to AppSignal.com servers.
        - Enabling debug logging could have a slight impact on the disk usage and IO, especially on high-traffic sites. CPU overhead is minimal with the debug option enabled.
    nodejs:
      since: 1.0.0
      since_notes:
        - Deprecated since version 2.2.6 in favor of the [`log_level` config option](#option-loglevel).
      type: bool
      default_value: false
      description:
        - "!> **Warning**: This config option is deprecated in Node.js package 2.2.6. Please use the [`logLevel`](#option-loglevel) option instead for Node.js package 2.2.6 and newer."
        - Enable debug logging, this is usually only needed on request from support. With this option enabled AppSignal will log a lot more information about decisions that are made during metrics collection and when data is sent to AppSignal.com servers.
        - Enabling debug logging could have a slight impact on the disk usage and IO, especially on high-traffic sites. CPU overhead is minimal with the debug option enabled.
  - config_key: transaction_debug_mode
    env_key: APPSIGNAL_TRANSACTION_DEBUG_MODE
    ruby:
      since: 2.9.18
      since_notes:
        - Deprecated since version 3.0.16 in favor of the [`log_level` config option](#option-log_level).
      type: bool
      default_value: false
      description:
        - "!> **Warning**: This config option is deprecated in Ruby gem 3.0.16. Please use the [`log_level`](#option-log_level) option instead for Ruby gem 3.0.16 and newer."
        - Enable transaction debug mode. This enables very detailed logging of transactions and events which is useful when developing integrations or when events aren not tracked as expected. The log is only written if the general `debug` option is on as well.
    elixir:
      since: 1.11.4
      since_notes:
        - Deprecated since version 2.2.9 in favor of the [`log_level` config option](#option-log_level).
      type: bool
      default_value: false
      description:
        - "!> **Warning**: This config option is deprecated in Elixir package 2.2.9. Please use the [`log_level`](#option-log_level) option instead for Elixir package 2.2.9 and newer."
        - Enable transaction debug mode. This enables very detailed logging of transactions and events which is useful when developing integrations or when events aren not tracked as expected. The log is only written if the general `debug` option is on as well.
  - config_key: log_level
    env_key: APPSIGNAL_LOG_LEVEL
    ruby:
      since: 3.0.16
      type: string
      default_value: "info"
    elixir:
      since: 2.2.8
      type: string
      default_value: "info"
    nodejs:
      since: 2.2.6
      type: string
      default_value: "info"
      config_key: "logLevel"
    description: |
      Set the severity level of the AppSignal logger. If it is configured to "info" it will log all error, warning and info messages, but not log the debug messages.

      Setting it to "debug" is usually only needed on request from support. Also, setting the level to "debug" could have a slight impact on the disk usage and IO, especially on high-traffic sites. CPU overhead is minimal with the debug option enabled.

      Accepted values:

        - error
        - warning
        - info
        - debug
  - config_key: dns_servers
    env_key: APPSIGNAL_DNS_SERVERS
    ruby:
      since: 2.2.0.beta.1
      since_notes:
        - "`2.11.0`: Support added for the system environment option."
      type:
        array:
          - string
      default_value: []
      description: |
        Configure DNS servers for the AppSignal agent to use.

        ```yml
        # config/appsignal.yml
        default: &defaults
          dns_servers:
          - 8.8.8.8
          - 8.8.4.4
        ```

        ```sh
        # In the host environment
        export APPSIGNAL_DNS_SERVERS="8.8.8.8,8.8.4.4"
        ```

        If you're affected by our [DNS timeouts](/support/known-issues.html#dns-timeouts), try setting a DNS server manually using this option that doesn't use more than __4__ dots in the server name.

        - Acceptable values: `8.8.8.8`, `my.custom.local.server`.
        - Not acceptable values: `foo`, `my.awesome.custom.local.dns.server`.

        If the DNS server cannot be reached the agent will fall back on the host's DNS configuration and output a message in the `appsignal.log` file: `A problem occurred while setting DNS servers`.
    elixir:
      since: 1.3.0.beta.2
      type:
        list:
          - string
      default_value: []
      description: |
        Configure DNS servers for the AppSignal agent to use.

        ```elixir
        # config/config.exs
        config :appsignal, :config,
          dns_servers: ["8.8.8.8", "8.8.4.4"]
        ```

        ```sh
        # In the host environment
        export APPSIGNAL_DNS_SERVERS="8.8.8.8,8.8.4.4"
        ```

        If you're affected by our [DNS timeouts](/support/known-issues.html#dns-timeouts), try setting a DNS server manually using this option that doesn't use more than __4__ dots in the server name.

        - Acceptable values: `8.8.8.8`, `my.custom.local.server`.
        - Not acceptable values: `foo`, `my.awesome.custom.local.dns.server`.

        If the DNS server cannot be reached the agent will fall back on the host's DNS configuration and output a message in the `appsignal.log` file: `A problem occurred while setting DNS servers`.
    nodejs:
      config_key: dnsServers
      type:
        list:
          - string
      default_value: []
      description: |
        Configure DNS servers for the AppSignal agent to use.

        ```sh
        # In the host environment
        export APPSIGNAL_DNS_SERVERS="8.8.8.8,8.8.4.4"
        ```

        If you're affected by our [DNS timeouts](/support/known-issues.html#dns-timeouts), try setting a DNS server manually using this option that doesn't use more than __4__ dots in the server name.

        - Acceptable values: `8.8.8.8`, `my.custom.local.server`.
        - Not acceptable values: `foo`, `my.awesome.custom.local.dns.server`.

        If the DNS server cannot be reached the agent will fall back on the host's DNS configuration and output a message in the `appsignal.log` file: `A problem occurred while setting DNS servers`.
  - config_key: ecto_repos
    env_key: APPSIGNAL_ECTO_REPOS
    elixir:
      since: 2.0.0
      type:
        list:
          - string
      default_value: nil
      description: |
        Configure which Ecto repos to instrument queries for. If unset, AppSignal will automatically find your repos through your application configuration.

        ```elixir
        # config/config.exs
        config :appsignal, :config,
          ecto_repos: [AppsignalPhoenixExample.Repo, AppsignalPhoenixExample.AnotherRepo]
        ```

        ```sh
        # In the host environment
        export APPSIGNAL_ECTO_REPOS="AppsignalPhoenixExample.Repo,AppsignalPhoenixExample.AnotherRepo"
        ```

        To turn off all Ecto instrumentation, configure `:ecto_repos` as an empty list:

        ```elixir
        # config/config.exs
        config :appsignal, :config,
          ecto_repos: []
        ```
  - config_key: enable_allocation_tracking
    env_key: APPSIGNAL_ENABLE_ALLOCATION_TRACKING
    ruby:
      since: 1.0.0
      type: bool
      default_value: true
    description: |
      Set this option to `false` to disable tracking of the number of allocated objects in Ruby.
  - config_key: enable_frontend_error_catching
    env_key: APPSIGNAL_ENABLE_FRONTEND_ERROR_CATCHING
    ruby:
      since: 1.0.0
      since_notes:
        - "`3.0.0`: Removed from the gem. See our [upgrade guide](/ruby/installation/upgrade-from-2-to-3.html) for more information."
      type: bool
      default_value: false
      description: |
        Enable the experimental front-end error catching system. This will add a route to your app on `/appsignal_error_catcher` that can be used to catch JavaScript error and send them to AppSignal. You can configure this route with [`frontend_error_catching_path`](#option-frontend_error_catching_path).
  - config_key: enable_host_metrics
    env_key: APPSIGNAL_ENABLE_HOST_METRICS
    ruby:
      since: 1.2.0
      type: bool
      default_value: true
    elixir:
      type: bool
      default_value: true
    nodejs:
      config_key: enableHostMetrics
      type: bool
      default_value: true
    description: |
      Set this option to `false` to disable [host metrics](/metrics/host.html) collection.
  - config_key: enable_minutely_probes
    env_key: APPSIGNAL_ENABLE_MINUTELY_PROBES
    ruby:
      since: 1.3.0
      since_notes:
        - "`2.9.0`: Default value was changed to `true`."
      type: bool
      default_value: true
      description: |
        Enables the [minutely probes](/ruby/instrumentation/minutely-probes.html) system.
    elixir:
      since: 1.10.1
      type: bool
      default_value: true
      description: |
        Enables the [minutely probes](/elixir/instrumentation/minutely-probes.html) system.
    nodejs:
      config_key: enableMinutelyProbes
      since: 0.4.0
      type: bool
      default_value: true
      description: |
        Enables the [minutely probes](/nodejs/metrics/minutely-probes.html) system.
  - config_key: enable_statsd
    env_key: APPSIGNAL_ENABLE_STATSD
    ruby:
      since: 3.0.14
      type: bool
      default_value: true
      description: |
        Enables the [StatsD server](/standalone-agent/statsd.html) in the AppSignal agent.
    elixir:
      since: 2.2.6
      type: bool
      default_value: false
      description: |
        Enables the [StatsD server](/standalone-agent/statsd.html) in the AppSignal agent.
    nodejs:
      config_key: enableStatsd
      since: 2.2.2
      type: bool
      default_value: false
      description: |
        Enables the [StatsD server](/standalone-agent/statsd.html) in the AppSignal agent.
  - config_key: endpoint
    env_key: APPSIGNAL_PUSH_API_ENDPOINT
    ruby:
      since: 0.1.0
      since_notes:
        - "`1.0.0`: Support for system environment variable added."
      type: string
      default_value: https://push.appsignal.com
    elixir:
      type: string
      default_value: https://push.appsignal.com
    description: |
      Configure the endpoint to send data to AppSignal. This setting will not have to be changed.
  - config_key: log
    env_key: APPSIGNAL_LOG
    ruby:
      since: 2.0.0
      type: string
      default_value: file
    elixir:
      type: atom
      default_value: :file
    nodejs:
      type: string
      default_value: file
    description: |
      Select which logger to the AppSignal agent should use. Accepted values are
      `file` and `stdout`. See also the `log_path` configuration.

      - `file` (default)
        - Write all AppSignal logs to the file system.
      - `stdout` (default on [Heroku](http://heroku.com/))
        - Print AppSignal logs in the parent process' STDOUT instead of to a file.
          Useful with hosting solutions such as container systems and Heroku.

      -> **Note**: At this time only the AppSignal integration supports the "stdout" log output feature. The [AppSignal agent](/appsignal/how-appsignal-operates.html), which is used by the integration, does not support "stdout" log output. It will always write to the "appsignal.log" file.
  - config_key: log_path
    env_key: APPSIGNAL_LOG_PATH
    ruby:
      since: 1.0.0
      type: string
      default_value: ./log
    elixir:
      type: string
      default_value: "/tmp"
      since: 1.0.0
      since_notes:
        - "`1.9.0`: The default log path was changed from `/tmp/appsignal/` to `/tmp/`."
    nodejs:
      config_key: logPath
      type: string
      default_value: "/tmp"
    description:
      - Override the location of the path (directory) where the `appsignal.log` file can be written to.
      - *file_paths_notice
  - config_key: files_world_accessible
    env_key: APPSIGNAL_FILES_WORLD_ACCESSIBLE
    ruby:
      since: 2.3.6
      type: bool
      default_value: true
    elixir:
      since: 1.3.4
      type: bool
      default_value: true
    nodejs:
      config_key: filesWorldAccessible
      since: 2.2.4
      type: bool
      default_value: true
    description: |
      If this is set to `true` the [AppSignal working directory](/appsignal/how-appsignal-operates.html#working-directory) that is created is accessible for all users (Unix permissions `0666`). This is often necessary because processes for the same app run under a different user. Set to `false` to disable this behaviour (Unix permissions `0644`).
  - config_key: filter_parameters
    env_key: APPSIGNAL_FILTER_PARAMETERS
    ruby:
      since: 1.3.0
      since_notes:
        - "`2.3.0`: This config option is also used for argument filtering in background job integrations."
      type:
        array:
          - string
      default_value: []
      description: |
        List of parameter keys that should be ignored using AppSignal filtering. Their values will be replaced with `[FILTERED]` when transmitted to AppSignal. You can configure this with a list of keys in the configuration file.

        ```yml
        # config/appsignal.yml
        default: &defaults
          filter_parameters:
            - password
            - email
            - api_token
            - token
        ```

        Read more about [parameter filtering](/application/parameter-filtering.html).
    elixir:
      type:
        list:
          - string
      default_value: []
      description: |
        List of parameter keys that should be ignored using AppSignal filtering. Their values will be replaced with `[FILTERED]` when transmitted to AppSignal. You can configure this with a list of keys in the configuration file.

        ```elixir
        # config/appsignal.exs
        config :appsignal, :config,
          filter_parameters: ["password", "secret"]
        ```

        Read more about [parameter filtering](/application/parameter-filtering.html).
    nodejs:
      since: 2.2.5
      config_key: filterParameters
      type:
        list:
          - string
      default_value: []
      description: |
        List of parameter keys that should be ignored using AppSignal filtering. Their values will be replaced with `[FILTERED]` when transmitted to AppSignal.

        Read more about [parameter filtering](/application/parameter-filtering.html).
  - config_key: filter_session_data
    env_key: APPSIGNAL_FILTER_SESSION_DATA
    ruby:
      since: 2.6.0
      since_notes:
        - An upgrade to version `2.6.1` or higher is recommended.
      type:
        array:
          - string
      default_value: []
      description: |
        List of session data keys that should be ignored using AppSignal filtering. Their values will be replaced with `[FILTERED]` when transmitted to AppSignal. You can configure this with a list of keys in the configuration file.

        ```yml
        # config/appsignal.yml
        default: &defaults
          filter_session_data:
            - name
            - email
            - api_token
            - token
        ```

        Read more about [session data filtering](/application/session-data-filtering.html).
    elixir:
      since: 1.6.0
      since_notes:
        - An upgrade to version `1.6.3` or higher is recommended.
      type:
        list:
          - string
      default_value: []
      description: |
        List of session data keys that should be ignored using AppSignal filtering. Their values will be replaced with `[FILTERED]` when transmitted to AppSignal. You can configure this with a list of keys in the configuration file.

        ```elixir
        # config/appsignal.exs
        config :appsignal, :config,
          filter_session_data: ["name", "email", "api_token", "token"]
        ```

        Read more about [session data filtering](/application/session-data-filtering.html).
    nodejs:
      config_key: filterSessionData
      since: 2.2.5
      type:
        list:
          - string
      default_value: []
      description: |
        List of session data keys that should be ignored using AppSignal filtering. Their values will be replaced with `[FILTERED]` when transmitted to AppSignal.

        Read more about [session data filtering](/application/session-data-filtering.html).
  - config_key: hostname
    env_key: APPSIGNAL_HOSTNAME
    ruby:
      since: 1.3.6
      type: string
      default_value:
        markdown: detected from system
    elixir:
      since: 0.12.0
      type: string
      default_value:
        markdown: detected from system
    nodejs:
      type: string
      default_value:
        markdown: detected from system
    description: |
      This overrides the server's hostname. Useful for when you're unable to set a custom hostname or when a nondescript id is generated for you on hosting services.
  - config_key: http_proxy
    env_key: APPSIGNAL_HTTP_PROXY
    ruby:
      since: 0.11.13
      type: string
      default_value: null
    elixir:
      type: string
      default_value: null
    nodejs:
      config_key: httpProxy
      type: string
      default_value: null
    description: |
      If you require the agent to connect to the Internet via a proxy set the complete proxy URL in this configuration key.
  - config_key: ignore_actions
    env_key: APPSIGNAL_IGNORE_ACTIONS
    ruby:
      since: 0.10.0
      type:
        array:
          - string
      default_value: []
    elixir:
      type:
        list:
          - string
      default_value: []
    nodejs:
      config_key: ignoreActions
      type:
        list:
          - string
      default_value: []
    description: |
      List of actions that will be ignored, everything that happens including exceptions will not be transmitted to AppSignal.

      Read more about [ignoring actions](ignore-actions.html).
  - config_key: ignore_errors
    env_key: APPSIGNAL_IGNORE_ERRORS
    ruby:
      since: 0.1.0
      type:
        array:
          - string
      default_value: []
    elixir:
      type:
        list:
          - string
      default_value: []
    nodejs:
      config_key: ignoreErrors
      type:
        list:
          - string
      default_value: []
    description: |
      List of error classes that will be ignored. Any exception raised with this error class will not be transmitted to AppSignal. Read more about [ignoring errors](ignore-errors.html).
  - config_key: ignore_namespaces
    env_key: APPSIGNAL_IGNORE_NAMESPACES
    ruby:
      since: 2.3.0
      type:
        array:
          - string
      default_value: []
    elixir:
      since: 1.3.0
      type:
        list:
          - string
      default_value: []
    nodejs:
      config_key: ignoreNamespaces
      type:
        list:
          - string
      default_value: []
    description: |
      List of namespaces that will be ignored. Any error raised or slow request that occurs in this namespace will not be send to AppSignal. Read more about [namespaces](/application/namespaces.html).
  - config_key: instrument_net_http
    env_key: APPSIGNAL_INSTRUMENT_NET_HTTP
    ruby:
      since: 0.9.0
      type: bool
      default_value: true
      description: |
        Whether to add instrumentation for `net/http` calls, can be `true` or `false`. default is `true`.
  - config_key: instrument_redis
    env_key: APPSIGNAL_INSTRUMENT_REDIS
    ruby:
      since: 1.0.0
      type: bool
      default_value: true
    description: |
      Whether to add instrumentation for `redis` queries using the [Redis gem](https://github.com/redis/redis-rb), can be `true` or `false`. Default is `true`.
  - config_key: instrument_sequel
    env_key: APPSIGNAL_INSTRUMENT_SEQUEL
    ruby:
      since: 1.0.0
      type: bool
      default_value: true
    description: |
      Whether to add instrumentation for `sequel` queries using the [Sequel gem](http://sequel.jeremyevans.net/), can be `true` or `false`. Default is `true`.
  - config_key: request_headers
    env_key: APPSIGNAL_REQUEST_HEADERS
    ruby:
      since: 2.6.0
      since_notes:
        - Upgrade to `2.6.1` or higher is recommend.
      type:
        array:
          - string
      default_value:
        - HTTP_ACCEPT
        - HTTP_ACCEPT_CHARSET
        - HTTP_ACCEPT_ENCODING
        - HTTP_ACCEPT_LANGUAGE
        - HTTP_CACHE_CONTROL
        - HTTP_CONNECTION
        - CONTENT_LENGTH
        - PATH_INFO
        - HTTP_RANGE
        - REQUEST_METHOD
        - REQUEST_URI
        - SERVER_NAME
        - SERVER_PORT
        - SERVER_PROTOCOL
      description: |
        The `request_headers` config option contains a list of HTTP request headers which are read and stored by the AppSignal Ruby gem.

        This `request_headers` config option is an *allowlist*, which means that it will only take headers as specified by this config option. If this config option is unset it will use the AppSignal default.

        Following list is the AppSignal gem default.

        ```yml
        # config/appsignal.yml
        default: &defaults
          request_headers:
            - HTTP_ACCEPT
            - HTTP_ACCEPT_CHARSET
            - HTTP_ACCEPT_ENCODING
            - HTTP_ACCEPT_LANGUAGE
            - HTTP_CACHE_CONTROL
            - HTTP_CONNECTION
            - CONTENT_LENGTH
            - PATH_INFO
            - HTTP_RANGE
            - REQUEST_METHOD
            - REQUEST_URI
            - SERVER_NAME
            - SERVER_PORT
            - SERVER_PROTOCOL
        ```

        Note that AppSignal reads the headers from your app and they may not match 1 to 1 with what is being sent in the browser/client. In [Rack apps](https://rack.github.io/) ([Rails](/ruby/integrations/rails.html), [Sinatra](/ruby/integrations/sinatra.html), etc) all custom headers are prefixed with the `HTTP_` string, all header names are uppercased and dashes (`-`) are replaced with underscores (`_`).

        For example, the `X-Hub-Signature` header can be access by your app and AppSignal with the `HTTP_X_HUB_SIGNATURE` name.

        To configure AppSignal to not store any HTTP request headers on AppSignal transactions, configure the option with an empty array.

        ```yml
        # config/appsignal.yml
        default: &defaults
          request_headers: []
        ```
    elixir:
      since: 1.6.0
      since_notes:
        - Upgrade to `1.6.3` or higher is recommend.
      type:
        list:
          - string
      default_value:
        - accept
        - accept-charset
        - accept-encoding
        - accept-language
        - cache-control
        - connection
        - content-length
        - path-info
        - range
        - request-method
        - request-uri
        - server-name
        - server-port
        - server-protocol
      description: |
        The `request_headers` config option contains a list of HTTP request headers which are read and stored by the AppSignal Elixir package.

        This `request_headers` config option is an *allowlist*, which means that it will only take headers as specified by this config option. If this config option is unset it will use the AppSignal default.

        Following list is the AppSignal package default.

        ```elixir
        # config/appsignal.exs
        config :appsignal, :config,
          request_headers: ~w(
            accept accept-charset accept-encoding accept-language cache-control
            connection content-length path-info range request-method
            request-uri server-name server-port server-protocol
          )
        ```

        To configure AppSignal to not store any HTTP request headers on AppSignal transactions, configure the option with an empty list.

        ```elixir
        # config/appsignal.exs
        config :appsignal, :config,
          request_headers: []
        ```
    nodejs:
      config_key: requestHeaders
      since: 2.2.5
      type:
        list:
          - string
      default_value:
        - accept
        - accept-charset
        - accept-encoding
        - accept-language
        - cache-control
        - connection
        - content-length
        - range
      description: |
        The `requestHeaders` config option contains a list of HTTP request headers which are read and stored by the AppSignal Node.js package.

        This `requestHeaders` config option is an *allowlist*, which means that it will only take headers as specified by this config option. If this config option is unset it will use the AppSignal default.

        Following list is the AppSignal package default.

        ```js
        client = Appsignal.new(
          // ...Other config opts
          requestHeaders: [
            "accept",
            "accept-charset",
            "accept-encoding",
            "accept-language",
            "cache-control",
            "connection",
            "content-length",
            "range"
          ]
        )
        ```

        To configure AppSignal to not store any HTTP request headers on AppSignal transactions, configure the option with an empty list.

        ```js
        client = Appsignal.new(
          // ...Other config opts
          requestHeaders: []
        )
        ```

  - config_key: running_in_container
    env_key: APPSIGNAL_RUNNING_IN_CONTAINER
    ruby:
      since: 1.0.0
      since_notes:
        - Automatically detected since version `2.0`
      type: bool
      default_value:
        markdown: detected by Ruby gem
    elixir:
      type: bool
      default_value: false
    description: |
      AppSignal expects to be running on the same machine between different deploys. Set this key to `true` if you use a container based deployment system such as Docker.

      Newer versions of the AppSignal integration automatically detect its container environment, so no manual configuration is necessary. If you're having trouble with the automatic detection, please [contact support](mailto:support@appsignal.com).

      This option is set to `true` automatically on [Heroku](http://heroku.com/).
  - config_key: send_environment_metadata
    env_key: APPSIGNAL_SEND_ENVIRONMENT_METADATA
    ruby:
      since: 2.11.0
      type: bool
      default_value: true
    elixir:
      since: 2.2.8
      type: bool
      default_value: true
    nodejs:
      config_key: sendEnvironmentMetadata
      since: 2.2.6
      type: bool
      default_value: true
    description: |
      Send environment metadata about the app.

      For more information please read about [environment metadata](/application/environment-metadata.html).
  - config_key: send_params
    env_key: APPSIGNAL_SEND_PARAMS
    ruby:
      since: 0.9.0
      since_notes:
        - "`1.3.0`: Support added for the system environment option."
      type: bool
      default_value: true
    elixir:
      since: 1.10.0
      type: bool
      default_value: true
    nodejs:
      config_key: sendParams
      since: 2.2.8
      type: bool
      default_value: true
    description: |
      Whether to skip sending request parameters to AppSignal.

      For more information please read about [send_params](parameter-filtering.html#filter-all-parameters) in filtering request parameters.
  - config_key: skip_session_data
    env_key: APPSIGNAL_SKIP_SESSION_DATA
    ruby:
      since: 0.11.0
      since_notes:
        - "`3.0.20`: Deprecated in favor of [`send_session_data`](#option-send_session_data)."
      type: bool
      default_value: false
      description:
        - "!> **Warning**: This config option is deprecated in Ruby gem 3.0.20. Please use the [`send_session_data`](#option-send_session_data) option instead for newer versions of the Ruby gem."
    elixir:
      type: bool
      default_value: false
    description: |
      Set this option to `true` to not send any session data with exception traces and performance issue samples.
  - config_key: send_session_data
    env_key: APPSIGNAL_SEND_SESSION_DATA
    ruby:
      since: 3.0.20
      type: bool
      default_value: true
    nodejs:
      config_key: sendSessionData
      since: 2.2.9
      type: bool
      default_value: true
    description: |
      Set this option to `false` to not send any session data with exception traces and performance issue samples.
  - config_key: working_dir_path
    env_key: APPSIGNAL_WORKING_DIR_PATH
    ruby:
      type: string
      default_value:
        markdown: detected by agent
      description:
        - "!> **Warning**: This config option is deprecated in Ruby gem 2.7.0. Please use the [`working_directory_path`](#option-working_directory_path) option instead for Ruby gem 2.7.0 and newer."
        - Override the location where AppSignal for Ruby creates a working directory. See [`working_directory_path`](#appsignal_working_directory_path-working_directory_path) for the behavior it is applicable. This config option appends `/appsignal` to the specified path, where [`working_directory_path`](#appsignal_working_directory_path-working_directory_path) does not.
    elixir:
      since: 1.8.0
      type: string
      default_value:
        markdown: detected by agent
      description:
        - "!> **Warning**: This config option is deprecated in Elixir package 1.8.0. Please use the [`working_directory_path`](#option-working_directory_path) option instead for Elixir package 1.8.0 and newer."
        - |
          Override the location where AppSignal for Elixir can store temporary files. Use this option if the default location is not suitable. See our [how AppSignal operates](/appsignal/how-appsignal-operates.html) page for more information about the purpose of this working directory.

          If you are running multiple applications using AppSignal on the same server, use this configuration option to select different working directories for every AppSignal instance, otherwise the two instances could conflict with one another. For more information on this scenario see our [running multiple applications on one host](/guides/application/multiple-applications-on-one-host.html) documentation.

          ```elixir
          # config/config.exs
          config :appsignal, :config,
            working_dir_path: "/tmp/project_1/"
          ```
    description:
      - *file_paths_notice
  - config_key: working_directory_path
    env_key: APPSIGNAL_WORKING_DIRECTORY_PATH
    ruby:
      since: 2.7.0
      since_notes:
        - "`2.10.12`: Support added for the system environment option."
        - "Please use the [`working_dir_path`](#option-working_dir_path) option on versions older than 2.7.0."
      type: string
      default_value:
        markdown: detected by agent
      description:
        - |
          Override the location where AppSignal for Ruby can store temporary files. Use this option if the default location is not suitable. See our [how AppSignal operates](/appsignal/how-appsignal-operates.html) page for more information about the purpose of this working directory.

          If you are running multiple applications using AppSignal on the same server, use this configuration option to select different working directories for every AppSignal instance, otherwise the two instances could conflict with one another. For more information on this scenario see our [running multiple applications on one host](/guides/application/multiple-applications-on-one-host.html) documentation.

          ```yml
          # config/appsignal.yml
          default: &defaults
            working_directory_path: "/tmp/project_1/"
          ```
    elixir:
      since: 1.8.0
      since_notes:
        - "Please use the [`working_dir_path`](#option-working_dir_path) option on earlier versions."
      type: string
      default_value:
        markdown: detected by agent
      description:
        - |
          Override the location where AppSignal for Elixir can store temporary files. Use this option if the default location is not suitable. See our [how AppSignal operates](/appsignal/how-appsignal-operates.html) page for more information about the purpose of this working directory.

          If you are running multiple applications using AppSignal on the same server, use this configuration option to select different working directories for every AppSignal instance, otherwise the two instances could conflict with one another. For more information on this scenario see our [running multiple applications on one host](/guides/application/multiple-applications-on-one-host.html) documentation.

          ```elixir
          # config/appsignal.exs
          config :appsignal, :config,
            working_directory_path: "/tmp/project_1/"
          ```
    nodejs:
      config_key: "workingDirectoryPath"
      since: 1.0.0
      type: string
      default_value:
        markdown: detected by agent
      description:
        - |
          Override the location where AppSignal for Node.js can store temporary files. Use this option if the default location is not suitable. See our [how AppSignal operates](/appsignal/how-appsignal-operates.html) page for more information about the purpose of this working directory.

          If you are running multiple applications using AppSignal on the same server, use this configuration option to select different working directories for every AppSignal instance, otherwise the two instances could conflict with one another. For more information on this scenario see our [running multiple applications on one host](/guides/application/multiple-applications-on-one-host.html) documentation.

          ```js
          // Example: appsignal.js
          const { Appsignal } = require("@appsignal/nodejs");

          const appsignal = new Appsignal({
            // Other config
            workingDirectoryPath: "/tmp/project_1"
          });
          ```
    description:
      - *file_paths_notice
  - config_key: revision
    env_key: APP_REVISION
    ruby:
      since: 2.6.0
      since_notes:
        - An upgrade to `2.6.1` or higher is recommended when using this option.
        - "`2.9.13`: Auto detection for Heroku deploys with the Dyno Metadata labs feature enabled."
        - "`2.9.14`: Do not use this release if you depend on the Heroku dyno metadata detection."
      type: string
      default_value: null
    elixir:
      since: 1.5.0
      since_notes:
        - "`1.10.12`: Auto detection for Heroku deploys with the Dyno Metadata labs feature enabled."
      type: string
      default_value: null
    nodejs:
      since: 1.0.0
      type: string
      default_value: null
    description: |
      Set the app revision for the currently running version of your app. Used to create deploy markers and tag all incoming data to a certain deploy for the host.

      When using Heroku with the [Heroku Labs: Dyno Metadata](https://devcenter.heroku.com/articles/dyno-metadata) enabled it will automatically set the `revision` config option to to the `HEROKU_SLUG_COMMIT` system environment variable. This will automatically report new deploys when the Heroku app gets deployed. The revision can still be overwritten by setting the `revision` config option yourself.

      Read more about deploy markers on the [deploy markers](/application/markers/deploy-markers.html).
